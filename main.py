from telebot import types
import parserpro
from db import insert, IsNewClient, BuysCount, NewOrder, Orders, dbstart, NewParseOrder, getOrderStatus
from cities import cities
from messagesControl import mainmenu, welcome, edit, send
from botStarter import bot
from ParseManager import GoParse

def isCityTrue(name):
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–≥–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏

    :param name: –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    :return: –µ—Å–ª–∏ –≥–æ—Ä–æ–¥ –≤–µ—Ä–Ω—ã–π, —Ç–æ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–π –≤–µ—Ä—Å–∏–∏, –∏–Ω–∞—á–µ False
    """
    if name in cities.keys():
        return cities[name]
    return False


# –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
citysend = []
# –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
valuesend = []
# —Å–ª–æ–≤–∞—Ä—å –≤ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≥–æ—Ä–æ–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –ë–î (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
city = {}
# —Å–ª–æ–≤–∞—Ä—å –≤ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≥–æ—Ä–æ–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –ë–î (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
cityRus = {}


@bot.message_handler(commands=['start'])
def start(message):
    chatid = message.chat.id
    if IsNewClient(chatid):
        welcome(chatid)
    else:
        mainmenu(chatid)


@bot.message_handler(content_types=['text'])
def texthandler(message):
    chatid = message.chat.id
    if chatid in citysend:
        check = isCityTrue(message.text)
        if check:
            menu = types.InlineKeyboardMarkup()
            citysend.remove(chatid)
            city[chatid] = check
            cityRus[chatid] = message.text
            new_message = '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–æ—Å:'
            valuesend.append(chatid)
            menu.add(types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞", callback_data="cancelsend"))
            send(chatid, new_message, menu)
        else:
            new_message = '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:'
            send(chatid, new_message)
    elif chatid in valuesend:
        valuesend.remove(chatid)
        new_message = '–ó–∞—è–≤–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –æ—á–µ—Ä–µ–¥—å, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å!\n–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é –æ—Ç–ø—Ä–∞–≤—å /start'
        send(chatid, new_message)
        value = message.text
        print('DATA: ', city[chatid], value, str(chatid))
        parse_id = NewParseOrder(city[chatid], value)
        NewOrder(chatid, city[chatid], cityRus[chatid], value, parse_id)
        GoParse()
        mainmenu(chatid)
    else:
        new_message = '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª!'
        send(chatid, new_message)


@bot.callback_query_handler(func=lambda message: True)
def answer(message):
    chatid = message.message.chat.id
    if message.data == 'continue':
        try:
            username = str(message.message.chat.username)
            insert(chatid, username)
            mainmenu(chatid, message.message.message_id)
        except Exception as e:
            print(message.data + ' Error: ', e)
    elif message.data == 'parse':
        try:
            menu = types.InlineKeyboardMarkup()
            new_message = '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:'
            citysend.append(chatid)
            menu.add(types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞", callback_data="cancelsend"))
            edit(chatid, message.message.message_id, new_message, menu)
        except Exception as e:
            print(message.data + ' Error: ', e)
    elif message.data == 'profile':
        try:
            menu = types.InlineKeyboardMarkup()
            new_message = "*üë®üèΩ‚Äçüíª–ü—Ä–æ—Ñ–∏–ª—å*\n\n–í–∞—à id: " + str(chatid) + "\n–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤: " + str(BuysCount(chatid))
            menu.add(types.InlineKeyboardButton(text="–Ω–∞–∑–∞–¥", callback_data="retmainmenu"))
            edit(chatid, message.message.message_id, new_message, menu)
        except Exception as e:
            print(message.data + ' Error: ', e)
    elif message.data == 'history':
        try:
            menu = types.InlineKeyboardMarkup()
            new_message = '*üóí–ò—Å—Ç–æ—Ä–∏—è*\n\n'
            if BuysCount(chatid) == 0:
                new_message += '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤!'
            else:
                new_message += '–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n'
                for orderid, CityRus, orderData, parse_id in Orders(chatid):
                    new_message += "*#" + str(orderid) + "*\n" + str(CityRus) + ": " + str(orderData) + "\n–°—Ç–∞—Ç—É—Å: "
                    if getOrderStatus(parse_id):
                        new_message += "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω‚úÖ\n\n"
                    else:
                        new_message += "–í –æ—á–µ—Ä–µ–¥–∏‚è≥\n\n"
            menu.add(types.InlineKeyboardButton(text="–Ω–∞–∑–∞–¥", callback_data="retmainmenu"))
            edit(chatid, message.message.message_id, new_message, menu)
        except Exception as e:
            print(message.data + ' Error: ', e)
    elif message.data == 'cancelsend':
        try:
            if chatid in citysend:
                citysend.remove(chatid)
            if chatid in valuesend:
                valuesend.remove(chatid)

            mainmenu(chatid, message.message.message_id)
        except Exception as e:
            print(message.data + ' Error: ', e)
    elif message.data == 'retmainmenu':
        try:
            mainmenu(chatid, message.message.message_id)
        except Exception as e:
            print(message.data + ' Error: ', e)


if __name__ == '__main__':
    dbstart()
    bot.polling()
