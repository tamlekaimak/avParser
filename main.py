import telebot
import parserPRO
from telebot import types
import json
from db import connectDB, insert, newClient
from cities import cities
import time


# –æ—Ç–∫—Ä—ã–≤–∞–µ–º json —Ñ–∞–π–ª –∏ —Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Ç—É–¥–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
with open('token.json', 'r', encoding='utf-8') as f:
    text = json.load(f)

botToken = text['token']

bot = telebot.AsyncTeleBot(botToken)

print("BOT STARTED!")

def isCityTrue(name):
    if name in cities.keys():
        return cities[name]
    return False

def sendmenu(chatid, message, menu, markdown=True):
    try:
        if markdown:
            bot.send_message(chatid, message, reply_markup=menu, parse_mode='Markdown')
        else:
            bot.send_message(chatid, message, reply_markup=menu)
    except Exception as e:
        print(e)
        return False
    else:
        return True

def send(chatid, message):
    try:
        bot.send_message(chatid, message, parse_mode='Markdown')
    except Exception as e:
        print(e)
        return False
    else:
        return True

def editmenu(chatid, messageid, new_message, menu, markdown=True):
    try:
        if markdown:
            bot.edit_message_text(chat_id=chatid, message_id=messageid, text=new_message, reply_markup=menu, parse_mode='Markdown')
        else:
            bot.edit_message_text(chat_id=chatid, message_id=messageid, text=new_message, reply_markup=menu)
    except Exception as e:
        print(e)
        return False
    else:
        return True

def senddoc(chatid, value):
    try:    
        bot.send_document(chatid, open('csv//' + value + str(chatid) + '_.csv', 'rb'))
    except Exception as e:
        print(e)
        return False
    else:
        return True


def edit(chatid, messageid, new_message):
    try:
        bot.edit_message_text(chat_id=chatid, message_id=messageid, text=new_message, parse_mode='Markdown')
    except Exception as e:
        print(e)
        return False
    else:
        return True

def mainmenu(chatid):
    menu = types.InlineKeyboardMarkup()
    menu.add(types.InlineKeyboardButton(text='üîé–°–ø–∞—Ä—Å–∏—Ç—å', callback_data='parse'))
    #menu.add(types.InlineKeyboardButton(text='üë®üèΩ‚Äçüíª–ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile'), types.InlineKeyboardButton(text='üóí–ò—Å—Ç–æ—Ä–∏—è', callback_data='history'))
    #menu.add(types.InlineKeyboardButton(text='‚ùì–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='instruction'), types.InlineKeyboardButton(text='üë®üèº‚Äçüîß–ü–æ–º–æ—â—å', callback_data='help'))
    new_message = "_–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_"
    sendmenu(chatid, new_message, menu)

def retmainmenu(chatid, message_id):
    menu = types.InlineKeyboardMarkup()
    menu.add(types.InlineKeyboardButton(text='üîé–°–ø–∞—Ä—Å–∏—Ç—å', callback_data='parse'))
    #menu.add(types.InlineKeyboardButton(text='üë®üèΩ‚Äçüíª–ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile'), types.InlineKeyboardButton(text='üóí–ò—Å—Ç–æ—Ä–∏—è', callback_data='history'))
    #menu.add(types.InlineKeyboardButton(text='‚ùì–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='instruction'), types.InlineKeyboardButton(text='üë®üèº‚Äçüîß–ü–æ–º–æ—â—å', callback_data='help'))
    new_message = "_–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_"
    try:
        bot.edit_message_text(chat_id=chatid, message_id=message_id, text=new_message, reply_markup=menu,
                          parse_mode='Markdown')
    except Exception as e:
        print(e)

def welcome(chatid):
    menu = types.InlineKeyboardMarkup()
    menu.add(types.InlineKeyboardButton(text="üóí–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://telegra.ph/")) #<—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é>
    menu.add(types.InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url="https://telegra.ph/")) #<—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ>
    menu.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='continue'))
    new_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ avParser!\n\n–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º.\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ*"
    sendmenu(chatid, new_message, menu)

# –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
citysend = []
# –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
valuesend = []
# —Å–ª–æ–≤–∞—Ä—å –≤ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≥–æ—Ä–æ–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –ë–î
city = {}

@bot.message_handler(commands=['start'])
def start(message):
    chatid = message.chat.id
    if newClient(chatid):
        welcome(chatid)
    else:
        mainmenu(chatid)

@bot.message_handler(content_types=['text'])
def texthandle(message):
    chatid = message.chat.id
    if chatid in citysend:
        check = isCityTrue(message.text)
        if check:
            citysend.remove(chatid)
            city[chatid] = check
            new_message = '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–æ—Å:'
            send(chatid, new_message)
            valuesend.append(chatid)
        else:
            new_message = '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:'
            send(chatid, new_message)
    elif chatid in valuesend:
        valuesend.remove(chatid)
        new_message = '–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å!'
        send(chatid, new_message)
        value = message.text
        print('DATA: ', city[chatid], value, str(chatid))
        parserPRO.main(city[chatid], value, chatid)
        new_message = '–ì–æ—Ç–æ–≤–æ, –¥–µ—Ä–∂–∏ —Å–≤–æ–π csv, —Ç–µ—Ä–ø–∏–ª–∞!'
        send(chatid, new_message)
        senddoc(chatid, value, new_message)
    else:
        new_message = '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª!'
        send(chatid, new_message)


@bot.callback_query_handler(func=lambda message: True)
def answer(message):
    chatid = message.message.chat.id
    if message.data == 'continue':
        try:
            username = str(message.message.chat.username)
            insert(chatid, username)
            retmainmenu(chatid, message.message.message_id)
        except Exception as e:
            print(message.data + ' Error: ', e)
    elif message.data == 'parse':
        try:
           new_message = '–û–ø—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:'
           citysend.append(chatid)
           edit(chatid, message.message.message_id, new_message)
        except Exception as e:
            print(message.data + ' Error: ', e)
           



if __name__ == '__main__':
    bot.polling()