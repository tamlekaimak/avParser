import telebot
import parserpro
from telebot import types
import json
from db import connectDB, insert, newClient, BuysCount, NewOrder, Orders
from cities import cities
import time
import dbcreate
import sqlite3 as db
# –æ—Ç–∫—Ä—ã–≤–∞–µ–º json —Ñ–∞–π–ª –∏ —Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç—Ç—É–¥–∞ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
with open('token.json', 'r', encoding='utf-8') as f:
    text = json.load(f)

botToken = text['token']

bot = telebot.TeleBot("1484844322:AAGj3l-O8wAIlp-O_0VTIa-zhaFji78lyMY")

print("BOT STARTED!")


try:
    connection = db.connect("darkDB.db")
    print("Connected to DB.\n" + '-'*20 + "\nTables:")
    cursor = connection.cursor()
    cursor.execute('SELECT name from sqlite_master where type= "table"')
    print(cursor.fetchall())
    if not cursor.fetchall():
        dbcreate.createTables()
except Exception as e:
    print(e)

def isCityTrue(name):
    if name in cities.keys():
        return cities[name]
    return False

def send(chatid, message, menu=False, markdown=True):
    try:
        if not menu:
            bot.send_message(chatid, message, parse_mode='Markdown')
        else:
            if markdown:
                bot.send_message(chatid, message, reply_markup=menu, parse_mode='Markdown')
            else:
                bot.send_message(chatid, message, reply_markup=menu)
    except Exception as e:
        print(e)
        return False
    else:
        return True

def edit(chatid, messageid, new_message, menu=False, markdown=True):
    try:
        if not menu:
            bot.edit_message_text(chat_id=chatid, message_id=messageid, text=new_message, parse_mode='Markdown')
        else:
            if markdown:
                bot.edit_message_text(chat_id=chatid, message_id=messageid, text=new_message, reply_markup=menu, parse_mode='Markdown')
            else:
                bot.edit_message_text(chat_id=chatid, message_id=messageid, text=new_message, reply_markup=menu)
    except Exception as e:
        print(e)
        return False
    else:
        return True

def senddoc(chatid, value):
    try:    
        bot.send_document(chatid, open('csv//' + value + str(chatid) + '.csv', 'rb'))
    except Exception as e:
        print(e)
        return False
    else:
        return True


def mainmenu(chatid):
    menu = types.InlineKeyboardMarkup()
    menu.add(types.InlineKeyboardButton(text='üîé–°–ø–∞—Ä—Å–∏—Ç—å', callback_data='parse'))
    menu.add(types.InlineKeyboardButton(text='üë®üèΩ‚Äçüíª–ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile'), types.InlineKeyboardButton(text='üóí–ò—Å—Ç–æ—Ä–∏—è', callback_data='history'))
    #menu.add(types.InlineKeyboardButton(text='‚ùì–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='instruction'), types.InlineKeyboardButton(text='üë®üèº‚Äçüîß–ü–æ–º–æ—â—å', callback_data='help'))
    new_message = "_–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_"
    send(chatid, new_message, menu)

def retmainmenu(chatid, message_id):
    menu = types.InlineKeyboardMarkup()
    menu.add(types.InlineKeyboardButton(text='üîé–°–ø–∞—Ä—Å–∏—Ç—å', callback_data='parse'))
    menu.add(types.InlineKeyboardButton(text='üë®üèΩ‚Äçüíª–ü—Ä–æ—Ñ–∏–ª—å', callback_data='profile'), types.InlineKeyboardButton(text='üóí–ò—Å—Ç–æ—Ä–∏—è', callback_data='history'))
    #menu.add(types.InlineKeyboardButton(text='‚ùì–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', callback_data='instruction'), types.InlineKeyboardButton(text='üë®üèº‚Äçüîß–ü–æ–º–æ—â—å', callback_data='help'))
    new_message = "_–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_"
    try:
        bot.edit_message_text(chat_id=chatid, message_id=message_id, text=new_message, reply_markup=menu,
                          parse_mode='Markdown')
    except Exception as e:
        print(e)

def welcome(chatid):
    menu = types.InlineKeyboardMarkup()
    menu.add(types.InlineKeyboardButton(text="üóí–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", url="https://telegra.ph/")) #<—Å—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é>
    menu.add(types.InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", url="https://telegra.ph/")) #<—Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑. —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ>
    menu.add(types.InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='continue'))
    new_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ avParser!\n\n–ü—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º.\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ*"
    send(chatid, new_message, menu)

# –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
citysend = []
# –º–∞—Å—Å–∏–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
valuesend = []
# —Å–ª–æ–≤–∞—Ä—å –≤ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≥–æ—Ä–æ–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –ë–î (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
city = {}
# —Å–ª–æ–≤–∞—Ä—å –≤ –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≥–æ—Ä–æ–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –≤ –ë–î (–Ω–∞ —Ä—É—Å—Å–∫–æ–º)
cityRus = {}

@bot.message_handler(commands=['start'])
def start(message):
    chatid = message.chat.id
    if newClient(chatid):
        welcome(chatid)
    else:
        mainmenu(chatid)

@bot.message_handler(content_types=['text'])
def texthandle(message):
    chatid = message.chat.id
    if chatid in citysend:
        check = isCityTrue(message.text)
        if check:
            menu = types.InlineKeyboardMarkup()
            citysend.remove(chatid)
            city[chatid] = check
            cityRus[chatid] = message.text
            new_message = '–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –∑–∞–ø—Ä–æ—Å:'
            valuesend.append(chatid)
            menu.add(types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞", callback_data="cancelsend"))
            send(chatid, new_message, menu)
        else:
            new_message = '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:'
            send(chatid, new_message)
    elif chatid in valuesend:
        valuesend.remove(chatid)
        new_message = '–ü–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å!'
        send(chatid, new_message)
        value = message.text
        print('DATA: ', city[chatid], value, str(chatid))
        NewOrder(chatid, city[chatid], cityRus[chatid], value)
        parserpro.main(city[chatid], value, str(chatid))
        new_message = '–ì–æ—Ç–æ–≤–æ, –¥–µ—Ä–∂–∏ —Å–≤–æ–π csv!'
        send(chatid, new_message)
        senddoc(chatid, value)
        mainmenu(chatid)
    else:
        new_message = '–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª!'
        send(chatid, new_message)


@bot.callback_query_handler(func=lambda message: True)
def answer(message):
    chatid = message.message.chat.id
    if message.data == 'continue':
        try:
            username = str(message.message.chat.username)
            insert(chatid, username)
            retmainmenu(chatid, message.message.message_id)
        except Exception as e:
            print(message.data + ' Error: ', e)
    elif message.data == 'parse':
        try:
           menu = types.InlineKeyboardMarkup()
           new_message = '–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:'
           citysend.append(chatid)
           menu.add(types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞", callback_data="cancelsend"))
           edit(chatid, message.message.message_id, new_message, menu)
        except Exception as e:
            print(message.data + ' Error: ', e)
    elif message.data == 'profile':
        try:
            menu = types.InlineKeyboardMarkup()
            new_message = "–í–∞—à id: " + str(chatid) + "\n–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑–æ–≤: " + str(BuysCount(chatid))
            menu.add(types.InlineKeyboardButton(text="–Ω–∞–∑–∞–¥", callback_data="retmainmenu"))
            edit(chatid, message.message.message_id, new_message, menu)
        except Exception as e:
            print(message.data + ' Error: ', e)
    elif message.data == 'history':
        try:
            menu = types.InlineKeyboardMarkup()
            if BuysCount(chatid) == 0:
                new_message = '–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤!'
            else:
                new_message = '–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n'
                for orderid, cityRus, orderData, isFinished in Orders(chatid):
                    new_message += "*#" + str(orderid) + "*\n" + str(cityRus) + ": " + str(orderData) + "\n–°—Ç–∞—Ç—É—Å: "
                    if isFinished == 0:
                        new_message += "–í –æ—á–µ—Ä–µ–¥–∏‚ùå\n\n"
                    else:
                        new_message += "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω‚úÖ\n\n"
            menu.add(types.InlineKeyboardButton(text="–Ω–∞–∑–∞–¥", callback_data="retmainmenu"))
            edit(chatid, message.message.message_id, new_message, menu)
        except Exception as e:
            print(message.data + ' Error: ', e)
    elif message.data == 'cancelsend':
        try:
            if chatid in citysend:
                citysend.remove(chatid)
            if chatid in valuesend:
                valuesend.remove(chatid)
            
            retmainmenu(chatid, message.message.message_id)
        except Exception as e:
            print(message.data + ' Error: ', e)
    elif message.data == 'retmainmenu':
        try:
            retmainmenu(chatid, message.message.message_id)
        except Exception as e:
            print(message.data + ' Error: ', e)
           



if __name__ == '__main__':
    bot.polling()